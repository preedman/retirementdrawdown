import { type ComponentType, type ReactElement } from 'react';
import { type ContextMenuRendererContext, type ContextMenuElement, type ContextMenuProps as _ContextMenuProps, type ContextMenuItem as _ContextMenuItem } from './generated/ContextMenu.js';
import { type ReactContextRendererProps } from './renderers/useContextRenderer.js';
export * from './generated/ContextMenu.js';
export type ContextMenuReactRendererProps = ReactContextRendererProps<ContextMenuRendererContext, ContextMenuElement>;
export type ContextMenuItem = Omit<_ContextMenuItem, 'component' | 'children'> & {
    component?: ReactElement | string;
    children?: Array<ContextMenuItem>;
};
export type ContextMenuItemSelectedEvent = CustomEvent<{
    value: ContextMenuItem;
}>;
export type ContextMenuProps = Partial<Omit<_ContextMenuProps, 'opened' | 'renderer' | 'items' | 'onItemSelected'>> & Readonly<{
    renderer?: ComponentType<ContextMenuReactRendererProps> | null;
    items?: Array<ContextMenuItem>;
    onItemSelected?: (event: ContextMenuItemSelectedEvent) => void;
}>;
declare const ForwardedContextMenu: import("react").ForwardRefExoticComponent<Partial<Omit<Partial<import("./utils/createComponent.js").ThemedWebComponentProps<ContextMenuElement, Readonly<{
    onItemSelected: import("@lit/react").EventName<import("@vaadin/context-menu/src/vaadin-context-menu.js").ContextMenuItemSelectedEvent>;
    onOpenedChanged: import("@lit/react").EventName<import("@vaadin/context-menu/src/vaadin-context-menu.js").ContextMenuOpenedChangedEvent>;
}>>>, "opened" | "items" | "renderer" | "onItemSelected">> & Readonly<{
    renderer?: ComponentType<Readonly<{
        context: ContextMenuRendererContext;
        original: ContextMenuElement;
    }>> | null | undefined;
    items?: ContextMenuItem[] | undefined;
    onItemSelected?: ((event: ContextMenuItemSelectedEvent) => void) | undefined;
}> & import("react").RefAttributes<ContextMenuElement>>;
export { ForwardedContextMenu as ContextMenu };
//# sourceMappingURL=ContextMenu.d.ts.map